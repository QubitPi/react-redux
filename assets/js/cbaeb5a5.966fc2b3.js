"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[399],{8080:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>u,toc:()=>d});var o=n(8168),r=n(8587),a=(n(6540),n(5680)),s=["components"],i={id:"accessing-store",title:"Accessing the Store",hide_title:!0,sidebar_label:"Accessing the Store",description:"Usage > Accessing the Store: techniques for getting the store in your components"},c=void 0,u={unversionedId:"using-react-redux/accessing-store",id:"using-react-redux/accessing-store",title:"Accessing the Store",description:"Usage > Accessing the Store: techniques for getting the store in your components",source:"@site/../docs/using-react-redux/accessing-store.md",sourceDirName:"using-react-redux",slug:"/using-react-redux/accessing-store",permalink:"/using-react-redux/accessing-store",draft:!1,editUrl:"https://github.com/reduxjs/react-redux/edit/master/website/../docs/using-react-redux/accessing-store.md",tags:[],version:"current",lastUpdatedAt:1737620528,formattedLastUpdatedAt:"Jan 23, 2025",frontMatter:{id:"accessing-store",title:"Accessing the Store",hide_title:!0,sidebar_label:"Accessing the Store",description:"Usage > Accessing the Store: techniques for getting the store in your components"},sidebar:"docs",previous:{title:"Connect: Dispatching Actions with mapDispatchToProps",permalink:"/using-react-redux/connect-mapdispatch"},next:{title:"Provider",permalink:"/api/provider"}},l={},d=[{value:"Understanding Context Usage",id:"understanding-context-usage",level:2},{value:"Using the <code>useStore</code> Hook",id:"using-the-usestore-hook",level:2},{value:"Providing Custom Context",id:"providing-custom-context",level:2},{value:"Custom Context and the hooks API",id:"custom-context-and-the-hooks-api",level:3},{value:"Multiple Stores",id:"multiple-stores",level:2},{value:"Using <code>ReactReduxContext</code> Directly",id:"using-reactreduxcontext-directly",level:2},{value:"Further Resources",id:"further-resources",level:2}],p={toc:d},m="wrapper";function h(e){var t=e.components,n=(0,r.A)(e,s);return(0,a.yg)(m,(0,o.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"accessing-the-store"},"Accessing the Store"),(0,a.yg)("p",null,"React Redux provides APIs that allow your components to dispatch actions and subscribe to data updates from the store."),(0,a.yg)("p",null,"As part of that, React Redux abstracts away the details of which store you are using, and the exact details of how that\nstore interaction is handled. In typical usage, your own components should never need to care about those details, and\nwon't ever reference the store directly. React Redux also internally handles the details of how the store and state are\npropagated to connected components, so that this works as expected by default."),(0,a.yg)("p",null,"However, there may be certain use cases where you may need to customize how the store is passed to\nconnected components, or access the store directly. Here are some examples of how to do this."),(0,a.yg)("h2",{id:"understanding-context-usage"},"Understanding Context Usage"),(0,a.yg)("p",null,"Internally, React Redux uses ",(0,a.yg)("a",{parentName:"p",href:"https://react.dev/learn/passing-data-deeply-with-context"},'React\'s "context" feature')," to make the\nRedux store accessible to deeply nested connected components. As of React Redux version 6, this is normally handled\nby a single default context object instance generated by ",(0,a.yg)("inlineCode",{parentName:"p"},"React.createContext()"),", called ",(0,a.yg)("inlineCode",{parentName:"p"},"ReactReduxContext"),"."),(0,a.yg)("p",null,"React Redux's ",(0,a.yg)("inlineCode",{parentName:"p"},"<Provider>")," component uses ",(0,a.yg)("inlineCode",{parentName:"p"},"<ReactReduxContext.Provider>")," to put the Redux store and internal subscription wrappers into context. ",(0,a.yg)("inlineCode",{parentName:"p"},"useSelector"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"useDispatch"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"connect")," call ",(0,a.yg)("inlineCode",{parentName:"p"},"useContext(ReactReduxContext)")," to read those values and handle updates."),(0,a.yg)("h2",{id:"using-the-usestore-hook"},"Using the ",(0,a.yg)("inlineCode",{parentName:"h2"},"useStore")," Hook"),(0,a.yg)("p",null,"The ",(0,a.yg)("a",{parentName:"p",href:"/api/hooks#useStore"},(0,a.yg)("inlineCode",{parentName:"a"},"useStore")," hook")," returns the current store instance from the default ",(0,a.yg)("inlineCode",{parentName:"p"},"ReactReduxContext"),". If you truly need to access the store, this is the recommended approach."),(0,a.yg)("h2",{id:"providing-custom-context"},"Providing Custom Context"),(0,a.yg)("p",null,"Instead of using the default context instance from React Redux, you may supply your own custom context instance."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-jsx"},"<Provider context={MyContext} store={store}>\n  <App />\n</Provider>\n")),(0,a.yg)("p",null,"If you supply a custom context, React Redux will use that context instance instead of the one it creates and exports by default."),(0,a.yg)("p",null,"After you\u2019ve supplied the custom context to ",(0,a.yg)("inlineCode",{parentName:"p"},"<Provider />"),", you will need to supply this context instance to all of your connected components that are expected to connect to the same store:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},"// You can pass the context as an option to connect\nexport default connect(\n  mapState,\n  mapDispatch,\n  null,\n  { context: MyContext }\n)(MyComponent)\n\n// or, call connect as normal to start\nconst ConnectedComponent = connect(\n  mapState,\n  mapDispatch\n)(MyComponent)\n\n// Later, pass the custom context as a prop to the connected component\n<ConnectedComponent context={MyContext} />\n")),(0,a.yg)("p",null,"The following runtime error occurs when React Redux does not find a store in the context it is looking. For example:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"You provided a custom context instance to ",(0,a.yg)("inlineCode",{parentName:"li"},"<Provider />"),", but did not provide the same instance (or did not provide any) to your connected components."),(0,a.yg)("li",{parentName:"ul"},"You provided a custom context to your connected component, but did not provide the same instance (or did not provide any) to ",(0,a.yg)("inlineCode",{parentName:"li"},"<Provider />"),".")),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},"Invariant Violation"),(0,a.yg)("p",{parentName:"blockquote"},'Could not find "store" in the context of "Connect(MyComponent)". Either wrap the root component in a ',(0,a.yg)("inlineCode",{parentName:"p"},"<Provider>"),", or pass a custom React context provider to ",(0,a.yg)("inlineCode",{parentName:"p"},"<Provider>")," and the corresponding React context consumer to Connect(Todo) in connect options.")),(0,a.yg)("h3",{id:"custom-context-and-the-hooks-api"},"Custom Context and the hooks API"),(0,a.yg)("p",null,"To access the custom context via the hooks API, you can create custom hooks via the ",(0,a.yg)("a",{parentName:"p",href:"/api/hooks#custom-context"},"hook creator functions"),"."),(0,a.yg)("h2",{id:"multiple-stores"},"Multiple Stores"),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://redux.js.org/api/store#a-note-for-flux-users"},"Redux was designed to use a single store"),".\nHowever, if you are in an unavoidable position of needing to use multiple stores, as of v6 you may do so by providing (multiple) custom contexts.\nThis also provides a natural isolation of the stores as they live in separate context instances."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},"// a naive example\nconst ContextA = React.createContext(null);\nconst ContextB = React.createContext(null);\n\n// assuming reducerA and reducerB are proper reducer functions\nconst storeA = createStore(reducerA);\nconst storeB = createStore(reducerB);\n\n// supply the context instances to Provider\nfunction App() {\n  return (\n    <Provider store={storeA} context={ContextA} />\n      <Provider store={storeB} context={ContextB}>\n        <RootModule />\n      </Provider>\n    </Provider>\n  );\n}\n\n// fetch the corresponding store with connected components\n// you need to use the correct context\nconnect(mapStateA, null, null, { context: ContextA })(MyComponentA)\n\n// You may also pass the alternate context instance directly to the connected component instead\n<ConnectedMyComponentA context={ContextA} />\n\n// it is possible to chain connect()\n// in this case MyComponent will receive merged props from both stores\ncompose(\n  connect(mapStateA, null, null, { context: ContextA }),\n  connect(mapStateB, null, null, { context: ContextB })\n)(MyComponent);\n")),(0,a.yg)("h2",{id:"using-reactreduxcontext-directly"},"Using ",(0,a.yg)("inlineCode",{parentName:"h2"},"ReactReduxContext")," Directly"),(0,a.yg)("p",null,"In rare cases, you may need to access the Redux store directly in your own components. This can be done by rendering\nthe appropriate context consumer yourself, and accessing the ",(0,a.yg)("inlineCode",{parentName:"p"},"store")," field out of the context value."),(0,a.yg)("admonition",{type:"caution"},(0,a.yg)("p",{parentName:"admonition"},"This is ",(0,a.yg)("strong",{parentName:"p"},(0,a.yg)("em",{parentName:"strong"},"not")," considered part of the React Redux public API, and may break without notice"),". We do recognize\nthat the community has use cases where this is necessary, and will try to make it possible for users to build additional\nfunctionality on top of React Redux, but our specific use of context is considered an implementation detail.\nIf you have additional use cases that are not sufficiently covered by the current APIs, please file an issue to discuss\npossible API improvements.")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-jsx"},"import { ReactReduxContext } from 'react-redux'\n\n// Somewhere inside of a <Provider>\nfunction MyConnectedComponent() {\n  // Access the store via the `useContext` hook\n  const { store } = useContext(ReactReduxContext)\n\n  // alternately, use the render props form of the context\n  /*\n  return (\n    <ReactReduxContext.Consumer>\n      {({ store }) => {\n        // do something useful with the store, like passing it to a child\n        // component where it can be used in lifecycle methods\n      }}\n    </ReactReduxContext.Consumer>\n  )\n  */\n}\n")),(0,a.yg)("h2",{id:"further-resources"},"Further Resources"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"CodeSandbox example: ",(0,a.yg)("a",{parentName:"li",href:"https://codesandbox.io/s/92pm9n2kl4"},"A reading list app with theme using a separate store"),", implemented by providing (multiple) custom context(s)."),(0,a.yg)("li",{parentName:"ul"},"Related issues:",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"https://github.com/reduxjs/react-redux/issues/1132"},"#1132: Update docs for using a different store key")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"https://github.com/reduxjs/react-redux/issues/1126"},"#1126: ",(0,a.yg)("inlineCode",{parentName:"a"},"<Provider>")," misses state changes that occur between when its constructor runs and when it mounts"))))))}h.isMDXComponent=!0},5680:(e,t,n)=>{n.d(t,{xA:()=>l,yg:()=>h});var o=n(6540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),u=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=u(e.components);return o.createElement(c.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=u(n),m=r,h=d["".concat(c,".").concat(m)]||d[m]||p[m]||a;return n?o.createElement(h,s(s({ref:t},l),{},{components:n})):o.createElement(h,s({ref:t},l))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,s=new Array(a);s[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[d]="string"==typeof e?e:r,s[1]=i;for(var u=2;u<a;u++)s[u]=n[u];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);
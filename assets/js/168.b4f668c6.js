"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[168],{5787:(t,e,s)=>{s.r(e),s.d(e,{CanaryProviderPagefind:()=>f});var r=s(4440),i=s(4676),a=s(4715),n=s(2208),o=s(2551),p=s(556);function c(t){const e=new Map;return(...s)=>{const r=JSON.stringify(s);if(e.has(r))return e.get(r);const i=t(...s);return e.set(r,i),Promise.resolve(i).catch((()=>{e.delete(r)})),i}}var l=s(9938),h=Object.defineProperty,d=Object.getOwnPropertyDescriptor,u=(t,e,s,r)=>{for(var i,a=r>1?void 0:r?d(e,s):e,n=t.length-1;n>=0;n--)(i=t[n])&&(a=(r?i(e,s,a):i(a))||a);return r&&a&&h(e,s,a),a};let f=class extends r.s{constructor(){super(...arguments),this.options={},this._pagefind=null,this.beforeSearch=async({text:t})=>{this._pagefind.preload(t)},this.search=async({text:t,tags:e},s,r)=>{const i=this.options.maxPages??20,{results:a}=await this._pagefind.search(t),n=await Promise.all(a.slice(0,i).map((t=>t.data()))).then((t=>t.filter((({meta:t})=>{const s=(t.tags??"").split(",").map((t=>t.trim())).filter(Boolean);return 0===s.length||s.some((t=>e.includes(t)))}))));return r.throwIfAborted(),{matches:this._transform(n)}}}async connectedCallback(){var t;super.connectedCallback();let e=window.pagefind;if(!e)try{e=await import((null==(t=this.options)?void 0:t.path)??"/pagefind/pagefind.js")}catch(s){return void console.info("Failed to import pagefind. Try serving app with production build.",s)}this._initPagefind(e),this.dispatchEvent((0,n.lh)({type:"register_operations",data:{search:c(this.search),beforeSearch:this.beforeSearch}}))}async _initPagefind(t){try{t.init(),this.options.pagefind&&await t.options(this.options.pagefind),this._pagefind=t}catch(e){throw new Error(`Failed to initialize pagefind': ${e}`)}}render(){return r.x`<slot></slot>`}_transform(t){const e=this.options.maxSubResults??3,s=t=>this.options._base?this.options._base+(0,o.Kl)(t.replace(this.options._replace||"","")):t,r=t=>t.weighted_locations.reduce(((t,e)=>Math.max(t,e.balanced_score)),-1);return t.sort(((t,e)=>r(e.sub_results[0])-r(t.sub_results[0]))).map((t=>{const r=t.sub_results.slice(0,e).map((t=>({url:s(t.url),title:t.title,excerpt:t.excerpt}))).filter((({title:e},s)=>!(0==s&&e==t.meta.title)));return{type:"webpage",meta:{},title:t.meta.title,url:s(t.url),excerpt:t.excerpt,sub_results:r}}))}};f.styles=p.w,u([(0,i.n)({type:Object})],f.prototype,"options",2),u([(0,a.r)()],f.prototype,"_pagefind",2),f=u([(0,l.r)("canary-provider-pagefind")],f)}}]);